#include <vector>
#include <cmath>
#include <iostream>

struct Point {
    double x, y;
};

struct PathPoint {
Point position;
double ideal_velocity;

PathPoint(double x, double y, double vel = 0)
    : position{x, y}, ideal_velocity(vel) {}
};

struct Config {
    /**
     * @brief minimum speed the car will consider on the velocity planning lookahead
     */
    double minimum_velocity_ = 3;
  
    /**
     * @brief maximum braking acceleration (should be negative)
     */
    double braking_acceleration_ = -4;
  
    /**
     * @brief the maximum normal acceleration
     */
    double normal_acceleration_ = 7;
  
    /**
     * @brief flag to enable/disable velocity planning
     */
    bool use_velocity_planning_ = true;
  
    Config() = default;
  
    Config(double minimum_velocity, double braking_acc, double normal_acc, bool use_velocity_planning)
        : minimum_velocity_(minimum_velocity),
          braking_acceleration_(braking_acc),
          normal_acceleration_(normal_acc),
          use_velocity_planning_(use_velocity_planning) {}
  };
  

class VelocityPlanning {
    public:
        VelocityPlanning(const Config& config) : config_(config) {}

        void set_velocity(std::vector<PathPoint> &final_path);
        double find_circle_center(PathPoint &point1, PathPoint &point2, PathPoint &point3);
        void point_speed(std::vector<double> &radiuses, std::vector<double> &velocities);
        void speed_limiter(std::vector<PathPoint> &points, std::vector<double> &velocities);

    private:
        Config config_;
};

double VelocityPlanning::find_circle_center(PathPoint &point1, PathPoint &point2, PathPoint &point3) {
    double x1 = point1.position.x;
    double y1 = point1.position.y;
    double x2 = point2.position.x;
    double y2 = point2.position.y;
    double x3 = point3.position.x;
    double y3 = point3.position.y;

    PathPoint mid1 = PathPoint((x1 + x2) / 2, (y1 + y2) / 2, 0);
    PathPoint mid2 = PathPoint((x2 + x3) / 2, (y2 + y3) / 2, 0);

    double slope1 = (x2 != x1) ? ((y2 - y1) / (x2 - x1)) : MAXFLOAT;
    double slope2 = (x3 != x2) ? ((y3 - y2) / (x3 - x2)) : MAXFLOAT;
    double slope1_perpendicular = (slope1 != 0) ? -1 / slope1 : 10000;
    double slope2_perpendicular = (slope2 != 0) ? -1 / slope2 : 10000;

    if (slope1_perpendicular == slope2_perpendicular) return 10000;

    double center_x = (slope1_perpendicular * mid1.position.x - slope2_perpendicular * mid2.position.x + mid2.position.y - mid1.position.y) / (slope1_perpendicular - slope2_perpendicular);
    double center_y = slope1_perpendicular * (center_x - mid1.position.x) + mid1.position.y;
    double radius = sqrt(pow(center_x - x2, 2) + pow(center_y - y2, 2));
    return radius;
    }

void VelocityPlanning::point_speed(std::vector<double> &radiuses, std::vector<double> &velocities) {
    for (int i = 0; i < static_cast<int>(radiuses.size()); i++) {
        double velocity = sqrt(abs(config_.normal_acceleration_ * radiuses[i]));
        velocities.push_back(std::max(velocity, config_.minimum_velocity_));
    }

    velocities.back() = config_.minimum_velocity_;

    return;
}

void VelocityPlanning::speed_limiter(std::vector<PathPoint> &points, std::vector<double> &velocities) {
    for (int i = static_cast<int>(points.size()) - 2; i >= 0; i--) {
        double distance = 0;
        double max_speed = velocities[i];

        int j = i+1;
        distance = sqrt(pow(points[j].position.x - points[j - 1].position.x, 2) +
        pow(points[j].position.y - points[j - 1].position.y, 2));

        // Correct kinematic speed calculation
        // v_f² = v_i² + 2ad
        double max_terminal_speed =
        sqrt(std::max(0.0, pow(velocities[j], 2) - 2 * config_.braking_acceleration_ * distance));

        max_speed = std::min(max_speed, max_terminal_speed);

        velocities[i] = max_speed;
    }
}

// Main function to set the velocity of the car
void VelocityPlanning::set_velocity(std::vector<PathPoint> &final_path) {
    if ((config_.use_velocity_planning_) && (final_path.size() > 2)) {
        std::vector<double> radiuses;
        radiuses.push_back(0);
        for (int i = 1; i < static_cast<int>(final_path.size()) - 1; i++) {
            radiuses.push_back(find_circle_center(final_path[i - 1], final_path[i], final_path[i + 1]));
        }
        radiuses[0] = radiuses[1];
        radiuses.push_back(radiuses.back());

        std::vector<double> velocities;
        point_speed(radiuses, velocities);
        speed_limiter(final_path, velocities);

        for (int i = 0; i < static_cast<int>(final_path.size()); i++) {
            final_path[i].ideal_velocity = velocities[i];
        }
    } else {
        for (auto &path_point : final_path) {
            path_point.ideal_velocity = config_.minimum_velocity_;
        }
    }
}

double calculate_total_time(const std::vector<PathPoint> &path) {
    double total_time = 0.0;
    for (size_t i = 1; i < path.size(); ++i) {
      double dx = path[i].position.x - path[i - 1].position.x;
      double dy = path[i].position.y - path[i - 1].position.y;
      double distance = std::sqrt(dx * dx + dy * dy);
      
      double v1 = path[i - 1].ideal_velocity;
      double v2 = path[i].ideal_velocity;
  
      // Trapezoidal integration for time estimation
      if (v1 > 0 && v2 > 0)
        total_time += (2 * distance) / (v1 + v2);
      else if (v1 > 0)
        total_time += distance / v1;
      else if (v2 > 0)
        total_time += distance / v2;
      else
        total_time += 0; // Avoid divide-by-zero
    }
    
    return total_time;
  }
  

  int main() {
    Config config;
    VelocityPlanning planner(config);
  
    std::vector<PathPoint> bestFSG23Path = {{0, 0}, {1.14749, -0.692523}, {20.1299, -1.53972}, {29.9426, -3.95555}, {33.7691, -5.60687}, {36.1609, -7.89683}, {38.1523, -11.5168}, {38.371, -17.0315}, {31.2138, -23.7876}, {26.0895, -26.6472}, {16.1484, -28.781}, {9.39153, -26.9317}, {-1.50508, -17.9211}, {-5.24573, -16.4995}, {-6.66313, -16.2825}, {-9.07269, -16.5777}, {-12.3608, -17.8301}, {-15.0378, -20.883}, {-16.5374, -26.0658}, {-17.4998, -29.8725}, {-18.8426, -35.1671}, {-20.0586, -41.8495}, {-16.9606, -46.9662}, {-12.5684, -52.8599}, {-8.64377, -59.4102}, {1.31807, -68.9539}, {3.7301, -72.8798}, {3.13022, -77.7188}, {2.63194, -78.4942}, {-2.72844, -78.6637}, {-17.4901, -71.7997}, {-22.3588, -69.22}, {-23.5126, -67.9633}, {-24.258, -66.2256}, {-25.0655, -54.6265}, {-30.9701, -45.3602}, {-38.3672, -32.9905}, {-39.2989, -29.5347}, {-39.6157, -14.7949}, {-37.989, -11.8849}, {-30.9014, -8.68484}, {-19.3253, -2.39397}, {-15.0345, -0.968151}, {-8.92107, 0.45499}};

    std::vector<PathPoint> midwayFSG23Path = {{0, 0}, {0.819132, -0.0452862}, {15.2569, -0.742622}, {18.226, -0.929762}, {24.9237, -1.84196}, {28.1614, -2.7445}, {32.5339, -4.28267}, {34.3143, -5.19257}, {35.5393, -6.07384}, {36.6816, -7.46929}, {37.6399, -9.20067}, {38.5112, -11.8203}, {38.8028, -14.7591}, {38.6003, -16.1955}, {38.2215, -17.9362}, {37.558, -18.9314}, {36.792, -19.7689}, {31.2182, -24.5697}, {30.3836, -25.1094}, {28.3673, -26.091}, {21.5494, -28.5042}, {18.1158, -29.2918}, {14.6553, -29.3149}, {13.5071, -29.0695}, {9.13056, -27.5072}, {7.88323, -26.7044}, {6.40279, -25.4966}, {5.15152, -24.2323}, {3.90189, -22.7248}, {-0.620617, -18.1192}, {-1.96509, -17.0126}, {-3.44561, -16.2498}, {-4.99062, -15.8324}, {-8.08711, -15.6047}, {-9.64785, -15.943}, {-11.3245, -16.5924}, {-13.2308, -17.75}, {-15.0216, -19.7213}, {-15.9185, -21.2346}, {-16.6012, -22.9146}, {-16.782, -24.655}, {-16.9063, -28.1991}, {-17.4903, -32.5161}, {-19.9322, -37.4083}, {-20.3724, -38.5152}, {-20.367, -40.2542}, {-20.2591, -41.4022}, {-19.9233, -43.1261}, {-19.5903, -44.1689}, {-18.027, -46.873}, {-16.6444, -48.2624}, {-13.7376, -50.6485}, {-11.8839, -52.4024}, {-10.9604, -54.1062}, {-10.7076, -54.7845}, {-9.95217, -58.1486}, {-7.38205, -61.7632}, {-4.52246, -63.9927}, {-0.494477, -66.1903}, {2.86916, -69.6698}, {4.09073, -71.8661}, {4.37627, -72.8338}, {4.34297, -75.3525}, {3.16331, -78.9483}, {1.1232, -79.5354}, {-0.582765, -79.4233}, {-19.5786, -71.6005}, {-21.069, -70.8826}, {-22.371, -70.0898}, {-23.1548, -69.4129}, {-24.6914, -67.3639}, {-24.9192, -66.5715}, {-25.2071, -64.809}, {-25.1996, -63.6915}, {-24.4713, -60.7242}, {-24.1651, -57.1497}, {-24.7875, -53.9966}, {-25.8207, -52.3686}, {-34.1564, -41.6364}, {-35.6801, -39.2373}, {-39.3224, -32.5153}, {-39.5491, -31.8462}, {-39.678, -31.1055}, {-39.8243, -27.6604}, {-40.3618, -18.2665}, {-40.43, -15.3816}, {-40.2236, -14.0043}, {-38.4531, -11.7338}, {-37.8438, -11.3159}, {-36.7179, -10.8779}, {-35.1126, -10.5697}, {-31.6166, -9.51919}, {-30.299, -9.05115}, {-27.905, -8.02442}, {-26.2896, -7.12306}, {-24.7009, -5.93603}, {-19.1601, -1.52529}, {-16.663, -0.569606}, {-15.7757, -0.40401}, {-14.5021, -0.333695}, {-8.44072, 0.00575884}};

    std::vector<PathPoint> bestTrack1Path = {{0, 0}, {1.09605, -0.289309}, {14.7034, -0.593356}, {19.4225, -1.702}, {23.1038, -3.3874}, {38.3309, -17.7954}, {45.1697, -23.7957}, {47.9331, -25.6964}, {53.3895, -27.4532}, {58.5189, -27.4844}, {82.3327, -24.6883}, {87.5606, -23.4827}, {90.2337, -21.795}, {91.3251, -19.9533}, {91.2703, -16.1278}, {87.7432, -9.8788}, {72.2092, 9.08456}, {71.5644, 12.2831}, {72.2794, 14.2439}, {82.8429, 28.6325}, {84.1594, 32.699}, {83.9968, 34.7585}, {80.4292, 38.0332}, {63.1395, 41.619}, {60.2527, 42.572}, {59.1113, 43.7708}, {58.5207, 45.2562}, {58.1389, 49.699}, {57.6911, 70.9009}, {55.5309, 74.2679}, {52.3669, 74.1557}, {47.5244, 69.7776}, {43.2649, 64.0106}, {37.2318, 53.3591}, {23.2929, 21.3888}, {19.9164, 16.0082}, {17.9688, 15.1834}, {15.5069, 15.8901}, {11.8619, 18.4863}, {-6.34118, 35.3859}, {-15.3686, 42.9371}, {-25.044, 49.4361}, {-30.3381, 51.4847}, {-34.7392, 53.0175}, {-41.4136, 54.2885}, {-46.5772, 53.8882}, {-50.327, 53.027}, {-54.6847, 50.1663}, {-55.0582, 49.6477}, {-56.4006, 46.3991}, {-56.8495, 42.9311}, {-56.4194, 40.738}, {-51.4124, 24.8953}, {-50.6913, 20.2112}, {-51.2761, 7.48083}, {-50.1858, 3.28282}, {-46.0272, -0.736674}, {-41.6951, -1.47949}, {-35.7633, -2.28505}, {-30.1568, -2.169}, {-8.36486, 0.0897199}};

    std::vector<PathPoint> midwayTrack1Path = {{0, 0}, {1.68829, -0.0722747}, {11.7729, -0.0969945}, {15.4863, -0.237845}, {17.7503, -0.528351}, {19.4811, -0.995323}, {21.154, -1.6608}, {23.4427, -2.93937}, {24.9133, -4.12586}, {27.1194, -6.14354}, {28.9082, -8.04514}, {33.7111, -13.6661}, {39.3417, -19.7582}, {43.4459, -23.3597}, {46.3254, -25.3769}, {49.3699, -26.9347}, {51.7593, -27.6767}, {53.243, -28.0669}, {55.3723, -28.2573}, {57.9005, -28.1027}, {59.6914, -27.8837}, {66.2829, -26.5441}, {70.0386, -25.9735}, {78.7409, -25.4865}, {83.6327, -25.0838}, {85.9588, -24.6313}, {86.9048, -24.341}, {89.2695, -23.3257}, {90.5556, -22.32}, {91.2698, -21.4199}, {91.7834, -20.4938}, {92.0557, -19.3268}, {92.126, -18.2124}, {91.9223, -16.7676}, {91.502, -15.4176}, {90.9375, -13.7915}, {89.8521, -11.7905}, {88.4106, -9.69444}, {86.6358, -7.4991}, {85.3689, -5.95743}, {74.5542, 4.9876}, {72.5138, 7.44843}, {71.2393, 9.75315}, {70.9269, 11.4621}, {71.1585, 13.2051}, {72.0499, 15.1675}, {73.6006, 17.1758}, {75.2594, 19.1126}, {78.297, 22.3616}, {81.4919, 25.9594}, {83.2928, 28.4407}, {84.464, 30.9588}, {84.8039, 33.0096}, {84.7157, 33.9575}, {84.4342, 34.9752}, {83.6459, 36.2151}, {82.512, 37.2421}, {80.7164, 38.233}, {78.8791, 38.8565}, {76.7197, 39.3208}, {74.238, 39.6979}, {64.3568, 40.6679}, {62.0427, 41.1352}, {60.1992, 41.8993}, {59.2482, 42.6126}, {58.6493, 43.3379}, {57.9602, 44.6825}, {57.6551, 45.9893}, {57.4715, 47.4739}, {57.5689, 51.2849}, {58.403, 59.9872}, {58.5452, 63.8428}, {58.5839, 67.2004}, {58.2227, 70.0714}, {57.5647, 72.197}, {57.1764, 73.0136}, {56.5987, 73.8591}, {55.8011, 74.5058}, {54.7939, 74.8414}, {53.7939, 74.8915}, {52.8787, 74.652}, {51.7427, 74.2046}, {50.3556, 73.2687}, {47.2722, 70.4936}, {45.7868, 68.6416}, {44.1363, 66.3623}, {42.4385, 64.0039}, {41.0049, 61.5204}, {38.528, 57.0162}, {36.4777, 52.8619}, {33.43, 46.1303}, {30.6576, 39.085}, {25.9795, 26.6805}, {23.1935, 20.1771}, {21.8182, 17.6502}, {21.1729, 16.6626}, {20.5413, 15.9144}, {19.8551, 15.2977}, {18.9211, 14.7452}, {18.0016, 14.5072}, {16.8259, 14.6222}, {15.7492, 15.0145}, {13.5554, 16.4086}, {9.66193, 19.9143}, {-0.50594, 30.6135}, {-7.62239, 37.5015}, {-12.1797, 41.3215}, {-17.4568, 45.3187}, {-19.8516, 46.8884}, {-23.5282, 49.081}, {-27.3061, 51.0194}, {-31.2733, 52.6344}, {-32.7732, 53.126}, {-35.6373, 53.9343}, {-40.0894, 54.7193}, {-42.7936, 54.8845}, {-45.2045, 54.7385}, {-47.1295, 54.4818}, {-49.7852, 53.7964}, {-52.5297, 52.5467}, {-54.2764, 51.2394}, {-55.1025, 50.4537}, {-56.2247, 48.8864}, {-57.0764, 47.0147}, {-57.3716, 45.3597}, {-57.4751, 44.2363}, {-57.2863, 41.5031}, {-56.3777, 38.0288}, {-55.4923, 35.7793}, {-51.6244, 27.1169}, {-51.0157, 25.4962}, {-50.6091, 24.0419}, {-50.2654, 22.468}, {-50.0497, 19.8022}, {-50.2552, 18.0969}, {-50.6314, 15.3788}, {-51.0767, 13.1923}, {-51.7005, 9.08901}, {-51.7481, 7.79421}, {-51.6599, 5.86308}, {-51.1488, 4.02155}, {-50.6977, 3.15211}, {-49.7721, 1.65141}, {-48.7849, 0.716512}, {-47.9336, 0.156193}, {-45.5729, -1.14419}, {-43.0544, -1.9754}, {-40.9961, -2.39845}, {-38.5946, -2.72427}, {-36.4325, -2.88169}, {-30.5656, -2.837}, {-25.5965, -2.40525}, {-8.74699, -0.335743}};

    std::vector<PathPoint> bestTrack20Path = {{0, 0}, {1.15144, -0.0636584}, {24.506, 0.0745842}, {28.7619, -0.47683}, {31.6388, -1.79246}, {33.9082, -6.2653}, {44.7816, -38.5937}, {49.0313, -47.5054}, {51.4903, -51.3055}, {54.8141, -54.1257}, {56.2751, -54.6254}, {57.9417, -53.9795}, {59.4295, -51.4445}, {60.7685, -47.3821}, {62.2051, -24.96}, {63.5577, -20.1162}, {65.8535, -18.274}, {80.3185, -15.2597}, {86.0736, -13.5638}, {88.6332, -11.9754}, {90.8088, -10.1578}, {102.692, 4.18319}, {106.644, 9.24678}, {107.62, 12.4548}, {106.488, 15.4835}, {102.493, 17.8078}, {96.9593, 19.3337}, {74.331, 21.783}, {70.2465, 23.6234}, {69.0255, 27.2182}, {70.4281, 41.4727}, {69.9907, 48.0493}, {68.7435, 50.7352}, {66.1645, 51.4411}, {62.2682, 49.3155}, {57.9786, 45.5287}, {53.8541, 41.3809}, {36.0683, 18.2483}, {33.3393, 16.8498}, {30.9685, 17.5232}, {29.1173, 19.1037}, {12.9481, 34.9164}, {5.65501, 38.3179}, {2.21629, 37.3058}, {-0.270797, 35.3667}, {-9.33983, 26.7268}, {-14.9333, 25.3303}, {-18.442, 24.8358}, {-37.7609, 22.1167}, {-50.2631, 18.9109}, {-57.3959, 15.5203}, {-61.2602, 12.3552}, {-62.9844, 9.93698}, {-62.4209, 5.93337}, {-59.8269, 3.4256}, {-54.8025, 0.758345}, {-46.6859, -0.899514}, {-34.5218, -1.66192}, {-8.82564, -0.263837}};

    std::vector<PathPoint> midwayTrack20Path = {{0, 0}, {2.15687, -0.119244}, {12.3877, -0.304901}, {14.9576, -0.211214}, {24.1534, 0.550296}, {26.2702, 0.65573}, {28.6388, 0.357175}, {30.0741, -0.20201}, {31.1368, -0.94689}, {31.8074, -1.61544}, {32.3949, -2.30325}, {33.0274, -3.38401}, {33.9517, -4.96547}, {35.4315, -8.96765}, {39.5889, -24.0523}, {41.5993, -31.1222}, {44.3697, -39.1962}, {46.2517, -43.5055}, {48.3825, -47.6489}, {49.6958, -49.7511}, {51.4136, -52.0047}, {52.4038, -53.0849}, {53.9351, -54.325}, {55.0238, -54.8806}, {56.1845, -55.1605}, {57.0774, -55.0414}, {57.933, -54.6935}, {58.9153, -53.8878}, {60.0568, -51.9862}, {60.4884, -50.6587}, {61.0481, -48.8184}, {61.6676, -44.1722}, {61.7973, -41.1406}, {61.7219, -26.289}, {61.8133, -24.4336}, {62.0607, -22.502}, {62.8241, -20.2423}, {63.3448, -19.4775}, {63.9542, -18.726}, {65.0492, -17.9542}, {66.6336, -17.3063}, {67.6692, -17.1017}, {69.8356, -16.795}, {77.038, -16.1794}, {81.5144, -15.6384}, {83.7112, -15.0983}, {84.5885, -14.8224}, {87.6081, -13.5527}, {89.3199, -12.3773}, {90.3473, -11.5589}, {92.5939, -9.07888}, {94.8211, -5.93287}, {98.0809, -1.67071}, {103.248, 3.91468}, {105.131, 6.0507}, {106.892, 8.51662}, {107.87, 10.7549}, {108.054, 11.8152}, {108.06, 12.9659}, {107.732, 14.0787}, {107.004, 15.38}, {106.353, 16.1437}, {105.122, 17.0834}, {103.593, 17.9067}, {101.599, 18.733}, {99.6287, 19.3093}, {97.2061, 19.7525}, {94.9832, 20.1315}, {89.0212, 20.6723}, {81.2216, 20.8652}, {74.9744, 21.3159}, {72.7983, 21.6988}, {71.5435, 22.1091}, {70.4871, 22.6903}, {69.5863, 23.5808}, {69.0008, 24.6221}, {68.7813, 25.5486}, {68.6335, 27.6553}, {68.8081, 29.4101}, {69.1329, 31.8942}, {69.8706, 35.6685}, {70.6195, 40.9875}, {70.907, 43.8257}, {70.8924, 46.4082}, {70.733, 47.9407}, {70.1916, 49.6587}, {69.4068, 50.859}, {68.6408, 51.4353}, {67.7819, 51.7929}, {66.7641, 51.8432}, {65.7296, 51.7155}, {64.1168, 51.1564}, {61.5687, 49.5677}, {60.1989, 48.4963}, {58.8548, 47.3103}, {56.531, 45.0386}, {53.1469, 41.2022}, {49.3269, 35.9626}, {40.5485, 23.1101}, {38.7697, 20.7625}, {37.2638, 18.8609}, {35.8377, 17.505}, {34.8589, 16.898}, {33.8623, 16.4331}, {32.7554, 16.2608}, {31.7683, 16.451}, {30.7214, 16.8681}, {28.731, 18.3332}, {26.1417, 21.0663}, {22.682, 25.2201}, {17.8005, 30.6231}, {16.2173, 32.2229}, {14.2273, 34.0684}, {13.1997, 34.8968}, {10.8673, 36.5624}, {8.85366, 37.6161}, {7.5692, 38.1782}, {5.79067, 38.5855}, {4.59815, 38.5487}, {3.42987, 38.4923}, {1.67753, 37.8902}, {-0.00659959, 36.6716}, {-1.61089, 34.7499}, {-2.87285, 33.011}, {-5.24671, 29.6631}, {-6.66784, 28.1701}, {-7.83449, 27.1959}, {-10.206, 25.8676}, {-12.9906, 25.0191}, {-18.415, 24.2041}, {-34.5122, 22.8781}, {-38.9461, 22.1803}, {-41.2352, 21.7833}, {-44.1106, 21.2016}, {-46.8638, 20.5346}, {-51.3103, 19.1699}, {-55.4216, 17.3075}, {-57.6718, 16.046}, {-59.1776, 15.0058}, {-61.1034, 13.3824}, {-62.0769, 12.2038}, {-62.7933, 11.0711}, {-63.4651, 9.27666}, {-63.5078, 7.68527}, {-62.9512, 5.88634}, {-61.6361, 4.12469}, {-60.7409, 3.37085}, {-59.0404, 2.15377}, {-57.4938, 1.36144}, {-55.2149, 0.480766}, {-52.3961, -0.343915}, {-49.8571, -0.897493}, {-48.5053, -1.15537}, {-46.7487, -1.43734}, {-41.7995, -1.9609}, {-36.0481, -2.20073}, {-27.081, -1.8988}, {-8.32121, -0.431433}};


    planner.set_velocity(bestFSG23Path);
    planner.set_velocity(midwayFSG23Path);
    planner.set_velocity(bestTrack1Path);
    planner.set_velocity(midwayTrack1Path);
    planner.set_velocity(bestTrack20Path);
    planner.set_velocity(midwayTrack20Path);

    double bestFSG23Time = calculate_total_time(bestFSG23Path);
    double midwayFSG23Time = calculate_total_time(midwayFSG23Path);
    double bestTrack1Time = calculate_total_time(bestTrack1Path);
    double midwayTrack1Time = calculate_total_time(midwayTrack1Path);
    double bestTrack20Time = calculate_total_time(bestTrack20Path);
    double midwayTrack20Time = calculate_total_time(midwayTrack20Path);

    std::cout << "Best FSG23 Path Total Time: " << bestFSG23Time << " seconds\n";
    std::cout << "Midway FSG23 Path Total Time: " << midwayFSG23Time << " seconds\n";
    std::cout << "Best Track 1 Path Total Time: " << bestTrack1Time << " seconds\n";
    std::cout << "Midway Track 1 Path Total Time: " << midwayTrack1Time << " seconds\n";
    std::cout << "Best Track 20 Path Total Time: " << bestTrack20Time << " seconds\n";
    std::cout << "Midway Track 20 Path Total Time: " << midwayTrack20Time << " seconds\n";

    std::cout << std::endl;

    if (bestFSG23Time < midwayFSG23Time) {
        std::cout << "Best FSG23 Path is faster than Midway FSG23 Path.\n";
    } else {
        std::cout << "Midway FSG23 Path is faster than Best FSG23 Path.\n";
    }
    if (bestTrack1Time < midwayTrack1Time) {
        std::cout << "Best Track 1 Path is faster than Midway Track 1 Path.\n";
    } else {
        std::cout << "Midway Track 1 Path is faster than Best Track 1 Path.\n";
    }
    if (bestTrack20Time < midwayTrack20Time) {
        std::cout << "Best Track 20 Path is faster than Midway Track 20 Path.\n";
    } else {
        std::cout << "Midway Track 20 Path is faster than Best Track 20 Path.\n";
    }

  
    // Optionally, print path velocities
    // for (size_t i = 0; i < path.size(); ++i) {
    //   std::cout << "Point " << i << ": (" << path[i].position.x << ", " << path[i].position.y
    //             << "), Velocity: " << path[i].ideal_velocity << " m/s\n";
    // }
  
    return 0;
  }
  
    